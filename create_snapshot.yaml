---
- name: Create a snapshot of a VM
  hosts: localhost
  gather_facts: false
  collections:
    - community.postgresql
  vars:
    vm_id: null  # Dynamisch übergebene VM-ID
  tasks:
    - name: Validate input variables
      fail:
        msg: "vm_id must be provided"
      when: vm_id is not defined or vm_id | trim == ""

    # Debugging: Zeigt alle Ansible-Facts
    - name: Debug all variables received
      debug:
        var: ansible_facts

    # Debugging: Zeigt alle wichtigen Variablen
    - name: Debug all used variables
      debug:
        msg:
          - "vm_id: {{ vm_id | default('NOT SET') }}"
          - "cpu_count: {{ vm_details.query_result[0].cpu_count | default('NOT SET') }}"
          - "ram_size: {{ vm_details.query_result[0].ram_size | default('NOT SET') }}"
          - "disks: {{ vm_details.query_result[0].disks | default('NOT SET') }}"
          - "adapters: {{ vm_details.query_result[0].adapters | default('NOT SET') }}"

    - block:
        - name: Fetch VM details
          community.postgresql.postgresql_query:
            db: vminventory
            login_user: jonas
            login_password: admin
            login_host: 127.0.0.1
            login_port: 5432
            query: |
              SELECT 
                vm_id, 
                cpu_count, 
                ram_size, 
                (SELECT json_agg(d) FROM (SELECT disk_id, disk_size FROM Disks WHERE vm_id = {{ vm_id }}) d) AS disks,
                (SELECT COUNT(*) FROM Netzwerkadapter WHERE vm_id = {{ vm_id }}) AS adapters
              FROM VMs
              WHERE vm_id = {{ vm_id }}
          register: vm_details

        - name: Debug fetched VM details
          debug:
            var: vm_details


        # Debugging: Überprüfen der zurückgegebenen Werte aus der Datenbank
        - name: Debug fetched VM details
          debug:
            var: vm_details.query_result

        - name: Validate VM existence
          fail:
            msg: "VM with ID {{ vm_id }} does not exist"
          when: vm_details.query_result | length == 0

        - name: Insert snapshot into the database
          community.postgresql.postgresql_query:
            db: vminventory
            login_user: jonas
            login_password: admin
            query: |
              INSERT INTO Snapshots (vm_id, cpu_count, ram_size, disks, adapters, created_at)
              VALUES (
                {{ vm_id }},
                {{ vm_details.query_result[0].cpu_count }},
                {{ vm_details.query_result[0].ram_size }},
                '{{ vm_details.query_result[0].disks | to_json }}',
                {{ vm_details.query_result[0].adapters }},
                NOW()
              )
          register: result

        - name: Confirm snapshot creation
          debug:
            msg: "Snapshot created for VM ID {{ vm_id }} successfully."

        - name: Signal successful completion to Camunda
          uri:
            url: "http://127.0.0.1:8080/engine-rest/signal"
            method: POST
            headers:
              Content-Type: "application/json"
            body: |
              {
                "name": "create_snapshot_completed"
              }
            body_format: json
            status_code: 204

      rescue:
        - name: Signal failure to Camunda
          uri:
            url: "http://localhost:8080/engine-rest/signal"
            method: POST
            headers:
              Content-Type: "application/json"
            body: |
              {
                "name": "create_snapshot_failed",
                "processVariables": {
                  "vm_id": { "value": "{{ vm_id | default('UNKNOWN') }}", "type": "String" },
                  "error_message": { "value": "Snapshot creation failed for VM ID {{ vm_id | default('UNKNOWN') }}", "type": "String" }
                }
              }
            body_format: json
            status_code: 204

        - name: Log failure message
          debug:
            msg: "Snapshot creation failed for VM ID {{ vm_id | default('UNKNOWN') }}. Signal sent to Camunda."
