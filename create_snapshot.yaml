---
- name: Create a snapshot of a VM
  hosts: localhost
  gather_facts: false
  collections:
    - community.postgresql

  vars:
    vm_id: null  # Dynamisch Ã¼bergebene VM-ID

  tasks:
    - name: Validate input variables
      fail:
        msg: "vm_id must be provided"
      when: vm_id is not defined or vm_id | trim == ""

    - name: Debug all used variables
      debug:
        msg:
          - "vm_id: {{ vm_id | default('NOT SET') }}"

    - block:
        - name: Check database connection
          community.postgresql.postgresql_query:
            db: "vminventory"
            login_user: "jonas"
            login_password: "admin"
            login_host: "10.0.2.15"
            login_port: 5432
            query: "SELECT 1;"
          register: db_test

        - name: Fetch VM details
          community.postgresql.postgresql_query:
            db: "vminventory"
            login_user: "jonas"
            login_password: "admin"
            login_host: "10.0.2.15"
            login_port: 5432
            query: |
              SELECT 
                vm_id, 
                cpu_count, 
                ram_size, 
                (SELECT json_agg(d) FROM (SELECT disk_id, disk_size FROM Disks WHERE vm_id = {{ vm_id }}) d) AS disks,
                (SELECT COUNT(*) FROM Netzwerkadapter WHERE vm_id = {{ vm_id }}) AS adapters
              FROM VMs
              WHERE vm_id = {{ vm_id }};
          register: vm_details

        - name: Validate VM existence
          fail:
            msg: "VM with ID {{ vm_id }} does not exist"
          when: vm_details.query_result | length == 0

        - name: Insert snapshot into the database
          community.postgresql.postgresql_query:
            db: "vminventory"
            login_user: "jonas"
            login_password: "admin"
            login_host: "10.0.2.15"
            login_port: 5432
            query: |
              INSERT INTO Snapshots (vm_id, cpu_count, ram_size, disks, adapters, created_at)
              VALUES (
                {{ vm_id }},
                {{ vm_details.query_result[0].cpu_count }},
                {{ vm_details.query_result[0].ram_size }},
                '{{ vm_details.query_result[0].disks | to_json }}',
                {{ vm_details.query_result[0].adapters }},
                NOW()
              );
          register: result

        - name: Confirm snapshot creation
          debug:
            msg: "Snapshot created for VM ID {{ vm_id }} successfully."

        - name: Get active process instance ID from Camunda
          uri:
            url: "http://10.0.2.15:8080/engine-rest/process-instance"
            method: GET
            headers:
              Content-Type: "application/json"
            return_content: yes
          register: camunda_instances

        - name: Extract processInstanceId
          set_fact:
            process_instance_id: "{{ (camunda_instances.json | selectattr('definitionId', 'search', 'change_request') | list | first).id | default('') }}"

        - name: Debug Camunda URL
          debug:
            msg: "Camunda API URL: http://{{ camunda_host | default('10.0.2.15') }}:8080/engine-rest/signal"

        - name: Send success message to Camunda
          uri:
            url: "http://10.0.2.15:8080/engine-rest/message"
            method: POST
            headers:
              Content-Type: "application/json"
            body_format: json
            body:
              messageName: "create_snapshot_completed"
              processInstanceId: "{{ process_instance_id }}"
              processVariables:
                vm_id:
                  value: "{{ vm_id }}"
                  type: "String"
            status_code: 200

      rescue:
        - name: Send failure message to Camunda
          uri:
            url: "http://10.0.2.15:8080/engine-rest/message"
            method: POST
            headers:
              Content-Type: "application/json"
            body_format: json
            body:
              messageName: "create_snapshot_failed"
              processInstanceId: "{{ process_instance_id }}"
              processVariables:
                vm_id:
                  value: "{{ vm_id }}"
                  type: "String"
                error_message:
                  value: "Snapshot creation failed for VM ID {{ vm_id }}"
                  type: "String"
            status_code: 200

        - name: Log failure message
          debug:
            msg: "Snapshot creation failed for VM ID {{ vm_id }}. Message sent to Camunda."
