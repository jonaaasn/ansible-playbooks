---
- name: Create a snapshot of a VM
  hosts: localhost
  gather_facts: false
  collections:
    - community.postgresql

  vars:
    vm_id: "{{ vm_id | default('') }}"
    process_instance_id: "{{ process_instance_id | default('') }}"

  tasks:
    - name: Debug received variables
      debug:
        msg:
          - "‚úÖ VM ID: {{ vm_id | default('NOT SET') }}"
          - "‚úÖ Process Instance ID: {{ process_instance_id | default('NOT SET') }}"

    - name: Validate input variables
      fail:
        msg: "‚ùå vm_id and process_instance_id must be provided!"
      when: vm_id | trim == "" or process_instance_id | trim == ""

    - block:
        - name: Check database connection
          community.postgresql.postgresql_query:
            db: "vminventory"
            login_user: "jonas"
            login_password: "admin"
            login_host: "10.0.2.15"
            login_port: 5432
            query: "SELECT 1;"
          register: db_test

        - name: Fetch VM details
          community.postgresql.postgresql_query:
            db: "vminventory"
            login_user: "jonas"
            login_password: "admin"
            login_host: "10.0.2.15"
            login_port: 5432
            query: |
              SELECT 
                vm_id, 
                cpu_count, 
                ram_size, 
                (SELECT COALESCE(jsonb_agg(d.*), '[]'::jsonb) FROM Disks d WHERE d.vm_id = {{ vm_id }}) AS disks,
                (SELECT COALESCE(jsonb_agg(n.*), '[]'::jsonb) FROM Netzwerkadapter n WHERE n.vm_id = {{ vm_id }}) AS adapters
              FROM VMs
              WHERE vm_id = {{ vm_id }};
          register: vm_details


        - name: Debug fetched VM details
          debug:
            msg: "üîç VM Details: {{ vm_details.query_result | to_json }}"

        - name: Validate VM existence
          fail:
            msg: "‚ùå VM with ID {{ vm_id }} does not exist!"
          when: vm_details.query_result | length == 0

        - name: Insert snapshot into the database
          community.postgresql.postgresql_query:
            db: "vminventory"
            login_user: "jonas"
            login_password: "admin"
            login_host: "10.0.2.15"
            login_port: 5432
            query: |
              INSERT INTO Snapshots (vm_id, cpu_count, ram_size, disks, adapters, created_at)
              VALUES (
                {{ vm_id }},
                {{ vm_details.query_result[0].cpu_count }},
                {{ vm_details.query_result[0].ram_size }},
                {{ vm_details.query_result[0].disks | to_json }}::jsonb,
                {{ vm_details.query_result[0].adapters | to_json }}::jsonb,
                NOW()
              );
          register: result

        - name: Confirm snapshot creation
          debug:
            msg: "‚úÖ Snapshot created for VM ID {{ vm_id }} successfully."

        - name: Signal successful completion to Camunda
          uri:
            url: "http://10.0.2.15:8080/engine-rest/message"
            method: POST
            headers:
              Content-Type: "application/json"
            body_format: json
            body:
              messageName: "create_snapshot_completed"
              processInstanceId: "{{ process_instance_id }}"
            status_code: 204

      rescue:
        - name: Signal failure to Camunda
          uri:
            url: "http://10.0.2.15:8080/engine-rest/message"
            method: POST
            headers:
              Content-Type: "application/json"
            body_format: json
            body:
              messageName: "create_snapshot_failed"
              processInstanceId: "{{ process_instance_id }}"
            status_code: 204

        - name: Log failure message
          debug:
            msg: "‚ùå Snapshot creation failed for VM ID {{ vm_id | default('UNKNOWN') }}. Signal sent to Camunda."
